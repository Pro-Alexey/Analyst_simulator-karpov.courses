{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e620ae89-77e0-4ddb-a728-ca10fbc94e9c",
   "metadata": {},
   "source": [
    "# Автоматизация отчётности "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44948b43-1b28-46ea-8d0b-6844b65dd91f",
   "metadata": {},
   "source": [
    "### Задачи\n",
    "##### 1. Создаём своего телеграм-бота с помощью @BotFather\n",
    "##### 2. Пишем скрипт для сборки отчета по ленте новостей. Отчет должен состоять из двух частей:\n",
    "*  текст с информацией о значениях ключевых метрик за предыдущий день\n",
    "*  график с значениями метрик за предыдущие 7 дней\n",
    "\n",
    "##### 3. Отображаем в отчете следующие ключевые метрики: \n",
    "\n",
    "- DAU \n",
    "- Просмотры\n",
    "- Лайки\n",
    "- CTR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d7ddd6d2-641b-4f28-99ba-870527405c2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import telegram\n",
    "import pandahouse\n",
    "import pandas as pd\n",
    "import datetime as dt\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "#Создаём бота и передаём ему наш токен (из BotFather)\n",
    "def telegram_report(chat=None):\n",
    "    #chat_id = chat or 726885196 #Чат ID личного чат бота\n",
    "    chat_id = chat or -715060805 #Чат ID группы курса (updates = bot.getUpdates() - этой функцией узнаём чат ID)\n",
    "    bot = telegram.Bot(token='5388356743:AAFRvvBIu_oe-DprC7UJNiTajKpFf72QSnE') #Создаём бота и передаём ему наш токен (из BotFather)\n",
    "    \n",
    "    #Формируем базу данных за прошлый день и формируем нужные нам столбцы\n",
    "\n",
    "    connection = {\n",
    "        'host': 'https://clickhouse.lab.karpov.courses',\n",
    "                          'database':'simulator_20220520',\n",
    "                          'user':'student', \n",
    "                          'password':'dpo_python_2020'}\n",
    "\n",
    "    q = '''SELECT\n",
    "             toDate(time) as data, \n",
    "             countIf(action='view') as view, \n",
    "             countIf(action = 'like') as like, \n",
    "             count(distinct user_id) as users,\n",
    "             round(like / view,2) as ctr\n",
    "           FROM simulator_20220520.feed_actions \n",
    "           WHERE data BETWEEN today() - 7 AND today()\n",
    "           GROUP BY data '''\n",
    "\n",
    "    df = pandahouse.read_clickhouse(q, connection=connection)\n",
    "    \n",
    "    #Формируем сообщение для бота, в котором будут прописаны все метрики\n",
    "    msg = (f' Current data report {df.data[6]}: ') + '\\n'\\\n",
    "         + (f'DAU:  {df.users[6]}') + '\\n'\\\n",
    "         + (f'View: {df.view[6]}') + '\\n'\\\n",
    "         + (f'Like: {df.like[6]}') + '\\n'\\\n",
    "         + (f'CTR: {df.ctr[6]}') \n",
    "\n",
    "    bot.sendMessage(chat_id, text = msg)   \n",
    "    \n",
    "    #Строим графики по нашим метрикам\n",
    "\n",
    "    plt.figure(figsize = (15,17))\n",
    "    sns.set_style(\"whitegrid\")\n",
    "\n",
    "    plt.subplot(3,1,1)\n",
    "    sns.lineplot(data = df, x = 'data', y = 'users')\n",
    "    plt.title('DAU last week')\n",
    "\n",
    "    plt.subplot(3,1,2)\n",
    "    sns.lineplot(data = df, x = 'data', y = 'view')\n",
    "    plt.subplot(3,1,2)\n",
    "    sns.lineplot(data = df, x = 'data', y = 'like', label = 'a')\n",
    "    plt.ylabel('View and Like')\n",
    "    plt.title('View and Like last week')\n",
    "    plt.legend(labels = ['View', 'Like'])\n",
    "\n",
    "    plt.subplot(3,1,3)\n",
    "    sns.lineplot(data = df, x = 'data', y = 'ctr')\n",
    "    plt.title('CTR last week') \n",
    "\n",
    "    #Сохраняем наш график как файловый объет в буфере, чтобы потом была возможность доставать объет из буфера\n",
    "    import io #позволяет направлять потоки ввода вывода данных\n",
    "    plot_object = io.BytesIO()\n",
    "    plt.savefig(plot_object)\n",
    "    plot_object.name = 'metric_plot.png'\n",
    "    plot_object.seek(0)\n",
    "\n",
    "    plt.close()\n",
    "\n",
    "    bot.sendPhoto(chat_id = chat_id, photo = plot_object)\n",
    "    \n",
    "try:\n",
    "    telegram_report()\n",
    "except Exception as e:\n",
    "    print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "796e65c8-4ff7-497b-98e0-c633068c5cc4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
